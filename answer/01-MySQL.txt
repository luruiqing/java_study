1、MySQL的索引采用怎样的数据结构？为什么不用二叉树？B树和B+树有什么区别？
	(1)索引不能都放到内存, 尽量减少磁盘IO(二叉树高度太高, 查询次数太多)
	(2)B树和B+树是一种多路搜索树, 并不是二叉的
	(3)B+树的非叶子节点只存key, 大大滴减少了非叶子节点的大小
	(4)B+树所有的叶子结点中包含了全部元素的信息, 且叶子结点本身依关键字的大小自小而大顺序链接, 范围查询非常方便
	(5)B树的查询性能不稳定, 越接近根节点性能越高, B+树都要查找叶子节点, 性能稳定

2、MySQL锁有哪些？
	表锁、行锁、记录锁、共享锁、排他锁、间隙锁、插入意向锁、死锁

3、MySQL默认的事务隔离级别是什么？
	可重复读(Repeatable read)

4、MySQL索引有哪几种？
	主键索引(聚簇索引)、唯一索引、普通索引、组合索引、全文索引(MyISAM引擎支持)、哈希索引

5、explain的Extra中, 如果出现Using index表示什么意思？
	表示在索引树中就可查找到所需的数据

6、死锁产生的原因是什么？
	两个以上事务加锁的顺序不一致, 导致互相等待对方释放锁, 从而产生死锁

7、MySQL是怎么完成主从同步的？
	(1)从库生成两个线程, 一个I/O线程, 一个SQL线程
	(2)i/o线程去请求主库的binlog, 并将得到的binlog日志写到relay log(中继日志)文件中, 主库会生成一个log dump线程, 用来给从库i/o线程传binlog
	(3)SQL线程会读取relay log(中继日志)文件中的日志, 并解析成具体操作, 来实现主从的操作一致, 而最终数据一致

8、select语句如果慢该如何优化？
	主键使用数字
	数据类型合理, 尽量使用数字
	not null
	大SQL拆分
	优先使用组合索引
	索引列不能参与计算
	避免count(*)
	大数据分页优化

9、int、int(5)、int(10)有什么区别？
    没区别, 都是占用4个自己存储, ()中的数字只是用来规则某些工具表示显示的长度

10、数据库是否支持emoji表情, 如果不支持该如何操作？
    升级至utf8_mb4即可支持

11、InnoDB引擎的行锁是怎么实现的？
    InnoDB是基于索引来完成行锁的, 如果没有索引会锁表

12、binlog有哪几种格式？使用canal时设置成哪种？
    Statement: 保存修改数据的SQL
    ROW: 保存每一行数据修改的内容
    MiXED: 混合模式, mysql会根据执行的SQL语句来区分日志的保存形式
    使用canal时需设置成ROW格式

13、MySQL的join原理是怎样的？
	(1)MySQL只支持一种JOIN算法Nested-Loop Join(嵌套循环链接), 不支持哈希链接和合并连接, 但有3种变种
	(2)Simple Nested-Loop Join: 从驱动表A中取一条数据, 查询B表匹配的数据, 循环驱动表一直循环到最后, 效率最低, 一直不会采用这种方式
	(3)Index Nested-Loop Join: B表有索引时使用这种方式, 当在索引上找到匹配的数据时才会回表查询, 因此效率最高
	(4)Block Nested-Loop Join: 没有索引时, 将驱动表的数据(只存放查询结果中出现的列值)先放到buffer中, 再查找B表中匹配的数据, buffer不够时会分批操作

14、MyISAM和InnoDB有什么区别？
    (1)InnoDB支持事务, MyISAM不支持
    (2)InnoDB支持MVCC, MyISAM不支持
    (3)InnoDB支持行锁, MyISAM只支持表锁
    (4)InnoDB索引节点存放的是数据的主键, 需要根据主键再次查询(所以表必须有主键), MyISAM索引节点存放的是数据物理地址的指针, 需根据指针再次获取数据